{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","onSearchChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,0BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHXC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAChB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHhBM,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EAIbG,SAAUF,MC0BHG,E,kDAhCb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAaRiB,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJE,E,qDAQnB,WAAqB,IAAD,OAClBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,oBAQ9C,WAAU,IAAD,EACyBC,KAAKN,MAA9Bd,EADA,EACAA,SAAUW,EADV,EACUA,YACXU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBACpG,OACI,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,iBAAiBC,aAAcgB,KAAKZ,iBAC3D,cAAC,EAAD,CAAUR,SAAUqB,W,GA3BZI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a4095124.chunk.js","sourcesContent":["import React from 'react';\nimport '../card/card.styles.css'\n\nexport const Card = props => (\n    <div className='card-container'>\n      <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&180×180`}/>\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n)\n","import React from \"react\";\nimport {Card} from \"../card/card.component.jsx\";\nimport \"./card-list.styles.css\";\n\nexport const CardList = (props) => (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n          <Card key={monster.id} monster={monster}/>\n      ))}\n    </div>\n);\n","import React from 'react';\nimport './search-box.styles.css';\n\n// destructure the props as placeholder and handleChange\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        // if we wanted to see or do something with our state right after we set  it\n        // then we have to do it inside of this second argument function that will\n        // get called right after the set state.\n        onChange={handleChange}/>\n)\n\n\n\n","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component.jsx'\nimport './App.css';\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({monsters: users}));\n  }\n\n  onSearchChange = (e) => {\n    this.setState({searchField: e.target.value})\n    //this => App{props: {…}, context: {…}, refs: {…}, updater: {…}, handleChange: ƒ,…}\n  }\n\n  render() {\n    const {monsters, searchField} = this.state\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n        <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n          <SearchBox placeholder='Search Monster' handleChange={this.onSearchChange}/>\n          <CardList monsters={filteredMonsters}/>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}